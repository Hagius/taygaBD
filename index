<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Holographic Basketball Card</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            height: 100vh;
            background: radial-gradient(ellipse at center, #1a1a2e 0%, #0f0f23 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: Arial, sans-serif;
            overflow: hidden;
            user-select: none;
        }

        .card-container {
            perspective: 1000px;
            width: 400px;
            height: 600px;
        }

        .card {
            position: relative;
            width: 100%;
            height: 100%;
            transform-style: preserve-3d;
            transition: transform 0.1s ease-out;
            cursor: grab;
        }

        .card.rotating {
            animation: rotate 40s linear infinite;
        }

        .card.dragging {
            cursor: grabbing;
        }

        @keyframes rotate {
            0% { transform: rotateY(0deg); }
            100% { transform: rotateY(360deg); }
        }

        .card-face {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            background-color: #000;
        }

        .card-front {
            background-image: url('https://i.imgur.com/796wDwj.png');
        }

        .card-back {
            background-image: url('https://i.imgur.com/TirsBfo.png');
            transform: rotateY(180deg);
        }

        /* Enhanced holographic overlay effects */
        .holographic-layer {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
            border-radius: 20px;
        }

        /* Primary shimmer effect */
        .shimmer-1 {
            background: linear-gradient(
                105deg,
                transparent 40%,
                rgba(255, 255, 255, 0.7) 50%,
                transparent 60%
            );
            background-size: 200% 200%;
            animation: shimmer1 2s ease-in-out infinite;
            mix-blend-mode: screen;
        }

        /* Secondary shimmer effect */
        .shimmer-2 {
            background: linear-gradient(
                45deg,
                transparent 30%,
                rgba(255, 255, 255, 0.4) 50%,
                transparent 70%
            );
            animation: shimmer2 3s ease-in-out infinite;
            mix-blend-mode: overlay;
        }

        /* Rainbow holographic effect */
        .rainbow-layer {
            background: linear-gradient(
                135deg,
                rgba(255, 0, 150, 0.3) 0%,
                rgba(0, 255, 255, 0.3) 25%,
                rgba(255, 255, 0, 0.3) 50%,
                rgba(255, 0, 255, 0.3) 75%,
                rgba(0, 255, 0, 0.3) 100%
            );
            mix-blend-mode: color-dodge;
            animation: rainbow 4s linear infinite;
            opacity: 0.8;
        }

        /* Metallic shine effect */
        .metallic-shine {
            background: radial-gradient(
                ellipse at 20% 20%,
                rgba(255, 255, 255, 0.8) 0%,
                transparent 50%
            );
            mix-blend-mode: screen;
            opacity: 0.6;
            animation: metallic 8s ease-in-out infinite;
        }

        @keyframes shimmer1 {
            0% {
                transform: translateX(-100%) translateY(-100%) rotate(35deg);
            }
            100% {
                transform: translateX(100%) translateY(100%) rotate(35deg);
            }
        }

        @keyframes shimmer2 {
            0% {
                transform: translateX(100%) translateY(-100%) rotate(-35deg);
            }
            100% {
                transform: translateX(-100%) translateY(100%) rotate(-35deg);
            }
        }

        @keyframes rainbow {
            0% {
                filter: hue-rotate(0deg) brightness(1.2);
            }
            100% {
                filter: hue-rotate(360deg) brightness(1.2);
            }
        }

        @keyframes metallic {
            0%, 100% {
                transform: scale(1) rotate(0deg);
            }
            50% {
                transform: scale(1.1) rotate(5deg);
            }
        }

        /* Enhanced holographic border effect */
        .card::before {
            content: '';
            position: absolute;
            top: -3px;
            left: -3px;
            right: -3px;
            bottom: -3px;
            background: linear-gradient(
                45deg,
                #ff0080, #ff8000, #ffff00, #80ff00, 
                #00ff80, #0080ff, #8000ff, #ff0080
            );
            background-size: 400% 400%;
            animation: holoBorder 3s linear infinite;
            border-radius: 23px;
            z-index: -1;
            filter: brightness(1.5);
        }

        @keyframes holoBorder {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }

        /* Floating particles effect */
        .particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            overflow: hidden;
            border-radius: 20px;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: radial-gradient(circle, rgba(255,255,255,1) 0%, transparent 70%);
            border-radius: 50%;
            animation: float 6s infinite ease-in-out;
            filter: blur(0.5px);
        }

        .particle:nth-child(1) { left: 20%; animation-delay: 0s; }
        .particle:nth-child(2) { left: 40%; animation-delay: 1s; }
        .particle:nth-child(3) { left: 60%; animation-delay: 2s; }
        .particle:nth-child(4) { left: 80%; animation-delay: 3s; }
        .particle:nth-child(5) { left: 30%; animation-delay: 4s; }
        .particle:nth-child(6) { left: 50%; animation-delay: 2.5s; }
        .particle:nth-child(7) { left: 70%; animation-delay: 3.5s; }
        .particle:nth-child(8) { left: 10%; animation-delay: 1.5s; }

        @keyframes float {
            0%, 100% {
                transform: translateY(100vh) scale(0);
                opacity: 0;
            }
            10% {
                opacity: 1;
                transform: translateY(90vh) scale(1);
            }
            90% {
                opacity: 1;
                transform: translateY(-10vh) scale(1);
            }
        }

        .instructions {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            color: rgba(255, 255, 255, 0.7);
            text-align: center;
            font-size: 14px;
        }

        @keyframes sparkle {
            0% {
                transform: scale(0) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: scale(2) rotate(180deg);
                opacity: 0;
            }
        }

        .sparkle {
            position: absolute;
            width: 6px;
            height: 6px;
            background: radial-gradient(circle, rgba(255,255,255,1) 0%, transparent 70%);
            border-radius: 50%;
            pointer-events: none;
            animation: sparkle 0.6s ease-out forwards;
            z-index: 1000;
        }
    </style>
</head>
<body>
    <div class="card-container">
        <div class="card rotating" id="card">
            <div class="card-face card-front">
                <div class="holographic-layer shimmer-1"></div>
                <div class="holographic-layer shimmer-2"></div>
                <div class="holographic-layer rainbow-layer"></div>
                <div class="holographic-layer metallic-shine"></div>
                <div class="particles">
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                </div>
            </div>
            <div class="card-face card-back">
                <div class="holographic-layer shimmer-1"></div>
                <div class="holographic-layer shimmer-2"></div>
                <div class="holographic-layer rainbow-layer"></div>
                <div class="holographic-layer metallic-shine"></div>
                <div class="particles">
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                    <div class="particle"></div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="instructions">
        Click and drag to rotate â€¢ Auto-rotates when released
    </div>

    <script>
        const card = document.getElementById('card');
        let isDragging = false;
        let startX = 0;
        let currentRotation = 0;
        let velocity = 0;
        let lastX = 0;
        let lastTime = Date.now();
        let animationPaused = false;

        // Get current rotation from transform
        function getCurrentRotation() {
            const transform = window.getComputedStyle(card).transform;
            if (transform !== 'none') {
                const values = transform.split('(')[1].split(')')[0].split(',');
                const a = values[0];
                const b = values[1];
                const angle = Math.round(Math.atan2(b, a) * (180 / Math.PI));
                return angle;
            }
            return 0;
        }

        // Mouse down event
        card.addEventListener('mousedown', (e) => {
            isDragging = true;
            startX = e.clientX;
            lastX = e.clientX;
            lastTime = Date.now();
            
            // Pause animation and get current rotation
            if (card.classList.contains('rotating') || card.classList.contains('rotating-custom')) {
                currentRotation = getCurrentRotation();
                card.classList.remove('rotating');
                card.classList.remove('rotating-custom');
                animationPaused = true;
            }
            
            card.classList.add('dragging');
            e.preventDefault();
        });

        // Mouse move event
        document.addEventListener('mousemove', (e) => {
            if (!isDragging) return;
            
            const deltaX = e.clientX - startX;
            const rotation = currentRotation + (deltaX * 0.5);
            
            // Calculate velocity for momentum
            const currentTime = Date.now();
            const deltaTime = currentTime - lastTime;
            if (deltaTime > 0) {
                velocity = (e.clientX - lastX) / deltaTime;
            }
            
            lastX = e.clientX;
            lastTime = currentTime;
            
            card.style.transform = `rotateY(${rotation}deg)`;
        });

        // Mouse up event
        document.addEventListener('mouseup', () => {
            if (!isDragging) return;
            
            isDragging = false;
            card.classList.remove('dragging');
            
            // Apply momentum
            const finalRotation = parseFloat(card.style.transform.replace('rotateY(', '').replace('deg)', '')) || 0;
            currentRotation = finalRotation + (velocity * 50);
            
            // Normalize rotation to 0-360 range
            currentRotation = currentRotation % 360;
            if (currentRotation < 0) currentRotation += 360;
            
            card.style.transform = `rotateY(${currentRotation}deg)`;
            
            // Resume auto-rotation from current position
            setTimeout(() => {
                if (!isDragging) {
                    // Create a new animation starting from current rotation
                    const animationName = 'rotateFrom' + Math.round(currentRotation);
                    const styleSheet = document.createElement('style');
                    styleSheet.textContent = `
                        @keyframes ${animationName} {
                            from { transform: rotateY(${currentRotation}deg); }
                            to { transform: rotateY(${currentRotation + 360}deg); }
                        }
                        .card.rotating-custom {
                            animation: ${animationName} 40s linear infinite;
                        }
                    `;
                    document.head.appendChild(styleSheet);
                    
                    // Apply the custom animation
                    card.classList.add('rotating-custom');
                    card.style.transform = '';
                    animationPaused = false;
                    
                    // Clean up old style tags periodically
                    const styleTags = document.querySelectorAll('style');
                    if (styleTags.length > 10) {
                        styleTags[0].remove();
                    }
                }
            }, 100);
        });

        // Touch events for mobile
        card.addEventListener('touchstart', (e) => {
            const touch = e.touches[0];
            const mouseEvent = new MouseEvent('mousedown', {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            card.dispatchEvent(mouseEvent);
        });

        document.addEventListener('touchmove', (e) => {
            const touch = e.touches[0];
            const mouseEvent = new MouseEvent('mousemove', {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            document.dispatchEvent(mouseEvent);
        });

        document.addEventListener('touchend', () => {
            const mouseEvent = new MouseEvent('mouseup', {});
            document.dispatchEvent(mouseEvent);
        });

        // Enhanced sparkle effects on mouse move
        document.addEventListener('mousemove', (e) => {
            const rect = card.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {
                // Create sparkle with random offset
                if (Math.random() > 0.8) {
                    const sparkle = document.createElement('div');
                    sparkle.className = 'sparkle';
                    sparkle.style.left = (e.clientX + (Math.random() - 0.5) * 10) + 'px';
                    sparkle.style.top = (e.clientY + (Math.random() - 0.5) * 10) + 'px';
                    
                    document.body.appendChild(sparkle);
                    
                    setTimeout(() => {
                        if (sparkle.parentNode) {
                            sparkle.parentNode.removeChild(sparkle);
                        }
                    }, 600);
                }
            }
        });

        // Load images with fallbacks
        function loadCardImages() {
            const frontUrls = [
                'https://i.imgur.com/796wDwj.png',
                'https://i.imgur.com/796wDwj.jpg'
            ];
            
            const backUrls = [
                'https://i.imgur.com/TirsBfo.png',
                'https://i.imgur.com/TirsBfo.jpg'
            ];

            function tryLoadImage(urls, element, fallbackGradient) {
                let currentIndex = 0;
                
                function attempt() {
                    if (currentIndex >= urls.length) {
                        element.style.background = fallbackGradient;
                        return;
                    }
                    
                    const img = new Image();
                    img.crossOrigin = 'anonymous';
                    
                    img.onload = function() {
                        element.style.backgroundImage = `url(${urls[currentIndex]})`;
                        element.style.backgroundSize = 'contain';
                        element.style.backgroundPosition = 'center';
                        element.style.backgroundRepeat = 'no-repeat';
                    };
                    
                    img.onerror = function() {
                        currentIndex++;
                        attempt();
                    };
                    
                    img.src = urls[currentIndex];
                }
                
                attempt();
            }

            const frontElement = document.querySelector('.card-front');
            const backElement = document.querySelector('.card-back');
            
            tryLoadImage(frontUrls, frontElement, 'linear-gradient(135deg, #1a237e 0%, #3949ab 50%, #5c6bc0 100%)');
            tryLoadImage(backUrls, backElement, 'linear-gradient(135deg, #e65100 0%, #ff9800 50%, #ffb74d 100%)');
        }

        window.addEventListener('load', loadCardImages);
    </script>
</body>
</html>
